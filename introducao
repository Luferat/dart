/*
 
 Dart é uma Linguagem de Script voltada à web desenvolvida pela Google
 Foi lançada em 2011 com objetivo inicial de substituir o JavaScript como linguagem principal embutida nos navegadores.

 Open Source, orientada a objetos e multi-propósitos
 Baseada na linguagem C e C++
 Dart é web e mobile
 Suporta a interfaces, mixins e classes abstratas
 
https://dart.dev >> documentação

https://dart.dev/language  >> específico sobre a linguagem

https://dartpad.dev/?

A estrutura da programação se desenvolve na função main(), que se deriva da linguagem C

*/



// 1. Tipos básicos de Variáveis e Concatenação

void main() {
  // Produtos

  // definindo variáveis pela tipagem
  int codigo = 1;
  String nome = 'Pendrive';
  double preco = 50.14;
  bool venda = true;
  String? vendedor; // uma ? significa aceita nullo
  // declaração com a clausula var
  var quantidade = 1;

  // declaração com dynamic (não é a melhor forma de programação)
  dynamic fornecedor = 1;
  fornecedor = 'Flutter';

  // print com concatenação
  print('Código: $codigo');
  print('Descrição: ${nome + ' - Kingston'}');
  print ('Preço($nome) : ${preco * 1.2}');
  print(venda);
  // concatenar com conversão de valores
  print('Quantidade : '+ quantidade.toString());
  print('Produto de código '+ codigo.toString() +' é '+ nome + 
        ' e o preço é: ' + (preco * 1.1).toString());
  print(fornecedor);
  //vendedor = 'Jorge';
  print(vendedor);
  
  // abaixo, ?? passa um valor caso nulo
  String? funcionario = vendedor?? ' não informado'; 

  print('Funcionário(a) :' + funcionario);
}


// 2. Operadores aritméticos com funções de retorno

// variável para uso de todos as funções
int res = 0;

void main() {
  
  int numero1 = 5;
  int numero2 = 2;
  
  print ('Soma = ${soma(numero1, numero2)}');
  print ('Subtração = ${subt(numero1, numero2)}');
  print ('Multiplicação = ${mult(numero1, numero2)}');
  print ('Divisão = ${div(numero1, numero2)}');
  print ('Divisão Parte Inteira = ${divPartInt(numero1, numero2)}');
  print ('Resto da Divisão = ${restoDiv(numero1, numero2)}');
  print ('Número Par? ${ePar(numero1, numero2)}');
   
}

int soma(int v1, int v2){
  res = v1+v2;
  return res; 
}

int subt(int v1, int v2){
  return v1 - v2; 
}

int mult(int v1, int v2){
  return v1 * v2; 
}

double div(int v1, int v2){
  return v1 / v2; 
}

int divPartInt(int v1, int v2){
  return v1 ~/ v2; 
}

int restoDiv(int v1, int v2){
  return v1 % v2; 
}

bool ePar(int v1, int v2){
  if (v1 % v2 == 0) return true;
  else return false;
}



// 3. Operadores de atribuição

void main() {
  
  int numero = 0;
  numero += 1;
  print (numero);
  numero ++;
  print(numero);
  
  for (int i = 0; i < 5; i++) {
    print('Elevador Sobe ${i + 1}');
  }
  
  for (int i = 5; i > 0; i--) {
    print('Elevador Desce ${i - 1}');
  }
  
  for (int i = 1; i <= 3; i *= 2) {
    print('Elevador Pula ${i * 2}');
  }
}

// 4. Estrutura if..else

void main() {
 
  String clima = "Chuva";
  int temperatura = 20;
  
  // || Or
  if (clima == 'Sol' || temperatura >15){
    print('Vou sair de casa');
  } else {
    print('Não vou sair de casa');
  }
  
  // && And
  if (clima == 'Sol' && temperatura >15){
    print('Vou sair de casa');
  } else {
    print('Não vou sair de casa');
  }
  
  // ! Not
  
  if (!(clima == 'Sol' && temperatura >15)){
    print('Vou sair de casa');
  } else {
    print('Não vou sair de casa');
  }
}


// 5. Operador ternário

void main() {
  bool condicao = true;
  String aula = "Dart";
  String clima = "Sol";
  
  print (condicao ? 'Condição Verdadeira':'Condição Falsa');
 
  print(2==3 ? 'Maior':'Menor ou Igual');
  
  print(aula == "Dart" ? 'Aula ok!' : 'Aula errada' );
  
  // variável para receber o resultado do operador ternário
  String uc = aula == 'Flutter' ? 'Aula ok' : 'Aula bugada';
  print ( uc );
  
  String mensagem = clima == 'Sol' ? 'Lindo dia quente':'Dia sem Sol';
  print ( mensagem );
  
  int numero = 1;
  numero >= 0 ? numero++ : numero--;
  print ( numero );
}


// 6. switch case e break

void main() {
  String tela = 'Home';
  
  switch( tela ){
    case 'Home' :
      print('Página inicial');
      break;
    
    case 'SplashScreen' :
      print('Splash Screen');
      break;
      
    default:
      print('Tela');
      break;
  } 
}

// 7. estrutura de repetição for, while, do while, for each
void main() {
  
  int j = 0;
  
  for (int i=1; i<=10; i++){
    print('Subindo com For '+ i.toString());
  }
  
  print('**__**');
    
  j=10;
  while (j>=1) {
    print('Descendo com While '+ j.toString());
    j--;
  }
  
  print('**__**');
  bool condicao = true;
  while (condicao) {
    print (j);
    j++;
    if (j>5){
      condicao = false;
    }
  }
  
  print('**__**');
  int x=10;
  do {
    print('Conteúdo de x: '+x.toString());
    x--;
  } while (x<5);

 print('**__**');
 // for each 
 List<String> cidades = ['Nova Iguaçu','Mesquita',
             'Nilópolis','Duque de Caxias','São João de Meriti',
             'Queimados','Rio de Janeiro','Petrópolis'];
 
 for (String cidade in cidades){
   print(cidade);
 }

}

// 8. Tratando um pouco mais de funções

// 8.1 >> chamando função dentro de outra função
void main() {
 saudacoes();
}

void saudacoes(){
  print ('Seja bem-vindo(a)');
  print(agora()); 
}

String agora(){
  DateTime agora = DateTime.now();
  return agora.toString();
}


// 8.2 >> passagem de parâmetros posicionais obrigatórios
void main() {
  saudacoes('Elias',true);
}

void saudacoes(String nome, bool mostrarAgora) {
  print('Seja bem-vindo(a) $nome');
  if (mostrarAgora) {
    print(agora());
  }
}

String agora() {
  DateTime agora = DateTime.now();
  return agora.toString();
}

// 8.3.1 >> passagem de parâmetro posicional opcional
void main() { 
  saudacoes('Elias');
}

/* [] colchetes definem parametro opcional
 * um valor default precisa ser alimentado
 */
void saudacoes(String nome, [bool mostrarAgora = true]) {
  print('Seja bem-vindo(a) $nome');
  if (mostrarAgora) {
    print(agora());
  }
}

String agora() {
  DateTime agora = DateTime.now();
  return agora.toString();
}

// 8.3.2 >> passagem de parâmetro posicional opcional
void main() { 
  saudacoes('Elias');
  saudacoes('Elias',true,'*');
  saudacoes('Elias',false);
}

/* [] colchetes definem parametro opcional
 * um valor default precisa ser alimentado
 */
void saudacoes(String nome, [bool mostrarAgora = true, String sep = '-']) {
  print(sep * 30);
  print('Seja bem-vindo(a) $nome');
  if (mostrarAgora) {
    print(agora());
  }
  print(sep * 30);
}

String agora() {
  DateTime agora = DateTime.now();
  return agora.toString();
}

// 8.3.3 >> passagem de parâmetro opcionais nomeados
void main() { 
  saudacoes('Elias');
  saudacoes('Elias',mostrarAgora:false);
  saudacoes('Elias',sep: '=-');
}

/* {} chaves definem parametro nomeado
 */
void saudacoes(String nome, {bool mostrarAgora = true, String sep = '-'}) {
  print(sep * 30);
  print('Seja bem-vindo(a) $nome');
  if (mostrarAgora) {
    print(agora());
  }
  print(sep * 30);
}

String agora() {
  DateTime agora = DateTime.now();
  return agora.toString();
}

// 9 >> Variáveis Nullable

// 9.1 Entendendo a aplicação

/* Vamos primeiro pensar em uma situação hipotética para o uso
 * deste tipo de variável:
 * Neste mesmo código uma nova mensagem de bem-vindo será exibida
 * para um cliente.
 * Para isso, criaremos um parametro com o nome do cliente e outro
 * parametro que indica se mostra ou não o cliente.
 *  */
void main() {
  saudacoes('Elias', cliente: 'Clóvis', mostrarCliente: true);
}

void saudacoes(
  String nome, {
  bool mostrarAgora = true,
  bool mostrarCliente = false,
  String cliente = '',
}) {
  print('Saudações do $nome');
  if (mostrarCliente){
    print('Seja bem-vindo(a), $cliente');
  }
  if (mostrarAgora) {
    print(agora());
  }
}

String agora() {
  DateTime agora = DateTime.now();
  return agora.toString();
}



// 9.2 >> Refazendo a função usando variáveis nulas
void main() {
  saudacoes('Elias', cliente:'Clóvis');
}

void saudacoes(
  String nome, {
  bool mostrarAgora = true,
  String? cliente,
}) {
  print('Saudações do $nome');

  if (cliente != null) {
    print('Seja bem-vindo(a), $cliente');
  }
  if (mostrarAgora) {
    print(agora());
  }
}

String agora() {
  DateTime agora = DateTime.now();
  return agora.toString();
}

// 9.3 >> Conversão de Variáveis Nullable

// Refazendo a função usando variáveis nulas
void main() {
  saudacoes('Elias', cliente:'Clóvis');
  saudacoes('Elias');
}

void saudacoes(
  String nome, {
  bool mostrarAgora = true,
  String? cliente,
}) {
  
  
  print('Saudações do ${nome.toUpperCase()}');

  /* uso do operador Null Aware (??)
   * se o cliente for nulo, será substituído pelo 
   * parametro passado 
   */
  String c = cliente ?? 'Não informado';
  print('Seja bem-vindo(a), ${c.toUpperCase()}');
  
  if (mostrarAgora) {
    print(agora());
  }
}

String agora() {
  DateTime agora = DateTime.now();
  return agora.toString();
}

// 9.3.1 >> Outro exemplo
void main() {
  saudacoes('Elias', cliente: 'Clóvis');
  saudacoes('Elias');
  // outro exemplo de null aware
  int? numero;
  int a = numero ?? 0;
  print(a);
}

void saudacoes(
  String nome, {
  bool mostrarAgora = true,
  String? cliente,
}) {
  print('Saudações do ${nome.toUpperCase()}');

  /* uso do operador Null Aware (??)
   * se o cliente for nulo, será substituído pelo 
   * parametro passado 
   */
  String c = cliente ?? 'Não informado';
  print('Seja bem-vindo(a), ${c.toUpperCase()}');

  if (mostrarAgora) {
    print(agora());
  }
}

String agora() {
  DateTime agora = DateTime.now();
  return agora.toString();
}

// 10.  Listas 

void main() {
	// Exemplo: Lista de nomes
	List<String> nomes = ["Nicho", "Arrascaeta","Viña", "Varela"];

	// Print da lista de nomes
	print("Lista de nomes:");
	print(nomes);

	// Iteração da lista e print de cada nome em maiúsculo
	print("\nNomes em maiúsculo:");
	for (String nome in nomes) {
		print(nome.toUpperCase());
	}
}

// 11.  Mapas

void main() {
	// Exemplo de  mapa com DDDs
	Map<int, String> ddds = {
		11: "São Paulo",
		21: "Rio de Janeiro",
		31: "Belo Horizonte",
		41: "Curitiba",
		51: "Porto Alegre"
	};

	// Chama a função para imprimir o valor da cidade para um determinado DDD
	imprimirCidadeDoDDD(11, ddds);
	imprimirCidadeDoDDD(21, ddds);
	imprimirCidadeDoDDD(31, ddds);
	imprimirCidadeDoDDD(41, ddds);
	imprimirCidadeDoDDD(51, ddds);
}

void imprimirCidadeDoDDD(int ddd, Map<int, String> ddds) {
	// Verifica se o DDD está no mapa
	if (ddds.containsKey(ddd)) {
		// Imprime a cidade associada ao DDD
		print("O DDD $ddd corresponde à cidade de ${ddds[ddd]}.");
	} else {
		// Imprime uma mensagem se o DDD não estiver no mapa
		print("DDD não encontrado para $ddd.");
	}
}


// 12. Uso de JSON no dart, exemplo com dados cadastrais

import 'dart:convert';

void main() {
	// Criando estrutura JSON com dados do aluno
	String dadosAlunoJson = '''
		{
			"nome": "João Silva",
			"nascimento": "2000-05-15",
			"tamanho": 175,
			"endereco": {
				"rua": "Rua das Flores",
				"numero": 123,
				"bairro": "Centro",
				"cidade": "São Paulo"
			}
		}
	''';

	// Convertendo o JSON para um mapa (Map<String, dynamic>)
	Map<String, dynamic> dadosAluno = jsonDecode(dadosAlunoJson);

	// Capturando e imprimindo os dados do aluno
	String nome = dadosAluno['nome'];
	String nascimento = dadosAluno['nascimento'];
	int tamanho = dadosAluno['tamanho'];
	Map<String, dynamic> endereco = dadosAluno['endereco'];
	String rua = endereco['rua'];
	int numero = endereco['numero'];
	String bairro = endereco['bairro'];
	String cidade = endereco['cidade'];

	// Imprimindo os dados do aluno
	print("Nome: $nome");
	print("Data de Nascimento: $nascimento");
	print("Tamanho: $tamanho");
	print("Endereço:");
	print("Rua: $rua, $numero");
	print("Bairro: $bairro");
	print("Cidade: $cidade");
}

// 13. >> Exemplo do uso de classe

void main() {
  final pessoa = Pessoa(nome: 'Marcos', idade:30);
  print(pessoa.toString());
}

class Pessoa {
  String? nome;
  int? idade;
  
  Pessoa({this.nome, this.idade});
  
  String toString(){
    return 'Pessoa(nome: $nome, idade: $idade)';
  }
}







